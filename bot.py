import logging
import os
import pandas as pd
from fastapi import FastAPI, Request
import uvicorn

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# === CONFIG ===
TOKEN = os.getenv("TOKEN")  # —Ç–æ–∫–µ–Ω –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
EXCEL_PATH = "–ë–∞–∑–∞.xlsx"
OWNER_ID = 747253701

# === –ó–∞–≥—Ä—É–∑–∫–∞ Excel ===
df_raw = pd.read_excel(EXCEL_PATH)
df = df_raw.rename(columns={"–ú–∞—Ç–µ—Ä–∏–∞–ª —É–ø–ª–æ—Ç–Ω–µ–Ω–∏—è ": "–ú–∞—Ç–µ—Ä–∏–∞–ª —É–ø–ª–æ—Ç–Ω–µ–Ω–∏—è"})

FILTER_COLUMNS = [
    "–¢–∏–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–ø–∞–Ω–∞", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "Dn, –º–º", "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
    "–†–∞–±–æ—á–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—ã, –ú–ü–∞", "–ú–∞—Ç–µ—Ä–∏–∞–ª —É–ø–ª–æ—Ç–Ω–µ–Ω–∏—è",
    "–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–æ—Ä–ø—É—Å–∞", "–ú–∞–∫—Å. —Ç–µ–º–ø. —Ä–∞–±–æ—á–µ–π —Å—Ä–µ–¥—ã, ¬∞–°",
    "–†–∞–±–æ—á–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ú–ü–∞", "–ú–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏–≤–æ–¥–∞",
    "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–¶–µ–Ω–∞ BPL",
]
RESULT_COLUMNS = ["–ù–æ–º–µ—Ä –≤ 1–°", "–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–¶–µ–Ω–∞ BPL"]

class FilterState(StatesGroup):
    step = State()
    finished = State()

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

# === –§—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
def create_keyboard(options, step_index=0, final=False):
    kb = ReplyKeyboardBuilder()
    for option in options:
        kb.add(KeyboardButton(text=option))
    if not final:
        if step_index > 0:
            kb.add(KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"))
        kb.add(KeyboardButton(text="üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"))
    else:
        kb.add(KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"))
        kb.add(KeyboardButton(text="üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"))
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)

def get_unique_options(column, df_subset):
    return sorted(df_subset[column].dropna().astype(str).str.strip().unique())

def format_results(dataframe, limit=30):
    lines = []
    for i, (_, row) in enumerate(dataframe.iterrows()):
        if i >= limit:
            lines.append(f"... –∏ –µ—â—ë {len(dataframe) - limit} —Å—Ç—Ä–æ–∫")
            break
        lines.append(f"‚Ä¢ <b>{row['–ù–æ–º–µ—Ä –≤ 1–°']}</b>\n{row['–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞']}\n{row['–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è']}\n{row['–¶–µ–Ω–∞ BPL']}")
    return "\n".join(lines)

# === –•—ç–Ω–¥–ª–µ—Ä—ã ===
@dp.message(Command(commands=["start", "restart"]))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(FilterState.step)
    await state.update_data(step_index=0, filters={}, current_df=df.copy(), finished=False)

    column = FILTER_COLUMNS[0]
    options = get_unique_options(column, df)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞: ¬´<b>{column}</b>¬ª",
        reply_markup=create_keyboard(options, step_index=0)
    )

@dp.message(Command(commands=["reset"]))
async def cmd_reset(message: types.Message, state: FSMContext):
    await cmd_start(message, state)

@dp.message(F.text == "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def handle_restart_button(message: types.Message, state: FSMContext):
    await cmd_reset(message, state)

@dp.message(FilterState.step)
async def handle_step(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if data.get("finished"):
        return

    msg_text = message.text.strip()
    step_index = data.get("step_index", 0)
    filters = data.get("filters", {})
    current_df = data.get("current_df", df.copy())

    if msg_text == "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        await cmd_reset(message, state)
        return

    if msg_text == "‚¨Ö –ù–∞–∑–∞–¥":
        if step_index == 0:
            await message.answer("‚õî –í—ã –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ.")
            return
        step_index -= 1
        filters.pop(FILTER_COLUMNS[step_index], None)
        new_df = df.copy()
        for col, val in filters.items():
            new_df = new_df[new_df[col].astype(str).str.strip() == val]
        await state.update_data(step_index=step_index, filters=filters, current_df=new_df)
        prev_column = FILTER_COLUMNS[step_index]
        options = get_unique_options(prev_column, new_df)
        await message.answer(
            f"‚¨Ö –í–µ—Ä–Ω—É–ª–∏—Å—å –∫: ¬´<b>{prev_column}</b>¬ª",
            reply_markup=create_keyboard(options, step_index=step_index)
        )
        return

    current_column = FILTER_COLUMNS[step_index]
    valid_options = current_df[current_column].dropna().astype(str).str.strip().unique()

    if msg_text not in valid_options:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    filters[current_column] = msg_text
    filtered_df = current_df[current_df[current_column].astype(str).str.strip() == msg_text]

    if filtered_df.empty:
        await message.answer("‚ùå 0 —à—Ç—É–∫. /start", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    if len(filtered_df) == 1:
        result_text = format_results(filtered_df)
        await message.answer(
            f"‚úÖ –ù–∞–π–¥–µ–Ω 1 –≤–∞—Ä–∏–∞–Ω—Ç:\n\n{result_text}",
            reply_markup=ReplyKeyboardRemove()
        )
        file_path = "filtered_results.xlsx"
        final_df = filtered_df[df_raw.columns]
        final_df.to_excel(file_path, index=False)
        await message.answer_document(types.FSInputFile(file_path))
        os.remove(file_path)

        await state.update_data(finished=True)
        await state.clear()
        return

    if len(filtered_df) <= 20:
        result_text = format_results(filtered_df)
        await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ <b>{len(filtered_df)}</b> —à—Ç—É–∫:\n\n{result_text}")

    step_index += 1
    if step_index >= len(FILTER_COLUMNS):
        await message.answer(
            "üéâ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        file_path = "filtered_results.xlsx"
        final_df = filtered_df[df_raw.columns]
        final_df.to_excel(file_path, index=False)
        await message.answer_document(types.FSInputFile(file_path))
        os.remove(file_path)

        await state.update_data(finished=True)
        await state.clear()
        return

    next_column = FILTER_COLUMNS[step_index]
    next_options = get_unique_options(next_column, filtered_df)
    await state.update_data(step_index=step_index, filters=filters, current_df=filtered_df)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ: ¬´<b>{next_column}</b>¬ª",
        reply_markup=create_keyboard(next_options, step_index=step_index)
    )

# === FastAPI –¥–ª—è Render ===
app = FastAPI()

@app.get("/")
async def root():
    return {"status": "–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"}

@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return {"ok": True}

if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    uvicorn.run("bot:app", host="0.0.0.0", port=port)
